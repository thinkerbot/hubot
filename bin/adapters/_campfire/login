#! /bin/bash
############################################################################

subdomain=${HUBOT_CAMPFIRE_SUBDOMAIN:-}
username=${HUBOT_CAMPFIRE_USERNAME:-}
password=${HUBOT_CAMPFIRE_PASSWORD:-}
cookies=${HUBOT_COOKIES_FILE:-var/hubot/cookies}

if [ -f "$cookies" ]
then
  rm "$cookies"
else
  mkdir -p "$(dirname "$cookies")"
fi

############################################################################
# Login procedure
############################################################################

# Get the authenticity token from the login form
authenticity_token=$(
  curl -s -b "$cookies" -c "$cookies" "https://$subdomain.campfirenow.com/login" | 
  grep authenticity_token |
  sed -e 's/.*authenticity_token//' -e 's/.*value="\([^"]\{1,\}\)".*/\1/g'
)

# Use it and credentials to log in... not sure why this one specific call has
# to be insecure but it's the case with me.
login_redirect=$(
  curl -s -k -b "$cookies" -c "$cookies" -F "authenticity_token=$authenticity_token" -F "product=campfire" -F "subdomain=$subdomain" -F "username=$username" -F "password=$password" https://launchpad.37signals.com/authenticate | 
  sed -e 's/.*href="\([^"]\{1,\}\)".*/\1/'
)

# Follow some redirect that actually does the login
curl -s -b "$cookies" -c "$cookies" "$login_redirect" > /dev/null
